@page "/tasks"
@inject TaskService taskService

<AuthorizeView Roles="User">
    <Authorized>
        <PageTitle>Task list</PageTitle>

        <h1>Task list</h1>

        <p>What should I do before tommorow</p>


        @if (tasks == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <button class="btn btn-primary" @onclick="addTask">Add a new task</button>
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Status</th>
                        <th>Text</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in tasks)
                    {
                        <tr>
                            <td>@task.Id</td>
                            <td><InputCheckbox @bind-Value="@task.IsDone" /></td>
                            <td>
                                <InputText @bind-Value="task.Text" />
                                <button class="btn btn-danger" @onclick="() => UpdateTask(task)">Save</button>
                                <button class="btn btn-danger" @onclick="() => DeleteTask(task.Id)">Suppr</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </Authorized>

    <NotAuthorized>
        Not Logged in
    </NotAuthorized>
</AuthorizeView>

@code {
    private TaskModel[]? tasks;

    protected override async Task OnInitializedAsync()
    {
        tasks = await taskService.GetAllTasks();
    }

    private async Task addTask()
    {
        if (tasks == null) return;
        var newTask = await taskService.CreateTask();
        Console.WriteLine(newTask.Id);
        var tasksList = tasks.ToList();
        tasksList.Add(newTask);
        tasks = tasksList.ToArray();
    }

    private async Task DeleteTask(int id)
    {
        if (tasks == null) return;
        await taskService.DeleteTask(id);
        tasks = tasks.Where(t => t.Id != id).ToArray();
    }

    private async Task UpdateTask(TaskModel task)
    {
        await taskService.UpdateTask(task);
    }

}
