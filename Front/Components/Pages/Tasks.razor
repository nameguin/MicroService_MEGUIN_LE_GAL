@page "/tasks"
@attribute [StreamRendering]

<PageTitle>Tasks</PageTitle>

<h1>Tasks list</h1>

<p>This component demonstrates showing data.</p>

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Summary</th>
                <th>Done</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.text</td>
                    <td>@task.isDone</td>
                    <td>@task.Date</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Task[]? tasks;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var text = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class Task
    {
        public DateOnly Date { get; set; }
        public string text { get; set; }
        public bool isDone { get; set; }
    }
}
