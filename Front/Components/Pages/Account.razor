@page "/account"
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider
@inject UserService userService
@inject LoginService loginService

<PageTitle>Your Account</PageTitle>

<AuthorizeView Roles="User">
    <Authorized>

        <h1>Account Options</h1>

        <br>

        @if (user == null)
        {
            <p><em>Your data is being recovered, if the process takes more than 30 seconds, please contact technical support</em></p>
        }
        else
        {
            @if (userToModify != null && userToModify.Id == user.Id)
            {
                @if (userToModify.isAdmin)
                {
                    <p><em>Test : Vous êtes administrateur (si vous voyez ce message, c'est que les devs ont oublié de l'enlever)</em></p>
                }
                else
                {
                    <p><em>Test : Vous n'êtes pas administrateur (si vous voyez ce message, c'est que les devs ont oublié de l'enlever)</em></p>
                }

                <div class="form-container">
                    <h3 class="log-h3">Modify your Account</h3>
                    <p><em>Any changes are permanent, if you encounter any problems, please contact technical support</em></p>

                    <div class="input-form">
                        <label for="TaskTitle">Name:</label>
                        <InputText @bind-Value="@userToModify.Name" />
                    </div>
                    <div class="input-form">
                        <label for="TaskTitle">Password:</label>
                        <InputText @bind-Value="@userToModify.Password" />
                    </div>
                    <div class="input-form">
                        <label for="TaskTitle">Email:</label>
                        <InputText type="email" @bind-Value="@userToModify.Email" />
                    </div>

                    <button @onclick ="() => UpdateUser(DTO_To_UpdateModel(user))" class="btn btn-success">Apply modifications</button>

                    @if (!string.IsNullOrWhiteSpace(updateErrorMessage))
                    {
                        <p class="text-danger" style="margin-top:10px">@updateErrorMessage</p>
                    }
                </div>
            
            }
        }

        <br>
         <div class="form-container">
            <h3 class="log-h3">Delete your Account</h3>
            <br>
            <button class="btn btn-danger" @onclick="Delete">Delete your account</button>
        </div>

    </Authorized>
    <NotAuthorized>
        Not Logged in
    </NotAuthorized>
</AuthorizeView>

@code {

    private UserDTO? user;
    private UserUpdateModel? userToModify = null;
    private string? updateErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        user = await userService.GetMyUserDTO();
        if(user != null)
        {
            userToModify = new UserUpdateModel
                {
                    Id = user.Id,
                    Name = user.Name,
                    Email = user.Email,
                    Password = "",
                    isAdmin = user.isAdmin
                };
        }
    }

    private async Task HandleSubmit()
    {
        await UpdateUser(DTO_To_UpdateModel(user));
    }

    public UserUpdateModel DTO_To_UpdateModel(UserDTO userDTO)
    {
        return new UserUpdateModel() { Id = userDTO.Id, Name = userDTO.Name, Email = userDTO.Email, Password = "", isAdmin = userDTO.isAdmin };
    }

    private async Task UpdateUser(UserUpdateModel? user)
    {
        updateErrorMessage = string.Empty;

        user.Name = userToModify.Name;
        user.Email = userToModify.Email;
        user.Password = userToModify.Password;
        user.isAdmin = userToModify.isAdmin;

        if (user != null)
        {
            var errorMessage = await userService.UpdateUser(user);
            updateErrorMessage = errorMessage;

            var tuple = await loginService.AuthenticateUser(user.Name, user.Password);

            if (tuple.user != null)
            {
                var userClaim = await ((CustomAuthenticationStateProvider)authStateProvider).MarkUserAsAuthenticated(tuple.user);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                if(errorMessage == "")
                {
                    updateErrorMessage = tuple.error;
                    StateHasChanged();
                }
            }
        }
    }

    private async void Delete()
    {
        // Kill the account
        await ((CustomAuthenticationStateProvider)authStateProvider).DeleteAccount();
        // Redirect the user to the register page
        NavigationManager.NavigateTo("/register");

    }
}
